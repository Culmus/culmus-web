#!/usr/bin/fontforge

/* This script for FontForge was created by Maxim Iorsh in 2006. It is public
domain. You can use it in any way and for any purpose.

This script automatically generates anchor positions for diacritics from
neutral data stored in glyph comments.

The comments stored in a glyph must be in the following format:
%DiaToBase<anchor-class>=<offset>

<anchor-class> can be one of the characters '1', '2', '3', 'O', 'U', which
correspond to narrow diacritics, medium-width diacritics, hatafs, holam haser,
shuruq.
<offset> is the horyzontal offset of the anchor from the zero position. In
Hebrew all diacritics are lined up, and they can't have non-zero vertical
offset.

For example, a comment in the form "%DiaToBase1=180" means that the anchor for
hiriq and shwa is located at the point (180,0) in the corresponding glyph.
The same anchor in the diacritic is always located at (0,0).

This script was developed and tested with build 20061220.
Script version: 22 Dec 2006.
*/

// Try to determine whether there is an active font
if ($firstfont == "")
	// No font is currently loaded
	// Try to get font name from argument
	if ($argc == 1)
		Error("Exiting - no font provided!");
	else
		myFont = $1;	// font name = first argument
	endif
else
	myFont = $curfont;	// font name = current active font
endif

// Try to open the font. If this is the current font (obtained from $curfont),
// pfaedit will do nothing. If this is a file name obtained from command line,
// a failure may occur due to incorrect font format or missing file. Such
// failure will cause the script to abort.
Open(myFont);

// Load Hebrew classes data.
"InitHebrewGlyphData.pe"();

////////////////////////////////////////////////////////////
//           GPOS // diacritics positioning		  //
////////////////////////////////////////////////////////////

//////////
// Cleanup old anchor classes and points

i = 0; while ( i < SizeOf(_VowelEquiv) )

    if ( CheckForAnchorClass(_VowelEquiv[i][0]) )
        RemoveAnchorClass(_VowelEquiv[i][0]);
    endif;

i++; endloop;

//////////
// Set for each diacritic its appropriate anchor

i = 0; while ( i < SizeOf(_VowelEquiv) )

    // Create anchor classes
    AddAnchorClass(_VowelEquiv[i][0], "default", "hebr{dflt}", "mark", 1, "");

    // Add anchor points to the diacritics
    ii = 1; while ( ii < SizeOf(_VowelEquiv[i]) )
        Select (_VowelEquiv[i][ii]);
        AddAnchorPoint(_VowelEquiv[i][0], "mark", 0, 0);
    ii++; endloop;

i++; endloop;

i = 0; while (i < SizeOf(_GlyphEquiv) )
j = 0; while (j < SizeOf(_VowelEquiv) )

    // For each glyph class vs. diacritic class we retrieve the
    // anchor position from the comments on the glyph.

    anchor_pos = 0;

    ii = 0; while (ii < SizeOf(_GlyphEquiv[i]) & anchor_pos == 0)

        Select (_GlyphEquiv[i][ii]);
        comments = StrSplit (GlyphInfo("Comment"), Chr(10));

        // Get the specific comment line for the current
        // anchor class and retrieve its value.
        key = "%" + _VowelEquiv[j][0];
        val = "";

        k = 0; while (k < SizeOf(comments) )
            key_val = StrSplit (comments[k], "=", 2);
            if (key_val[0] == key)
                val = key_val[1];
            endif;
        k++; endloop;

        if (Strlen (val) > 0)
            anchor_pos = Strtol (val);
        endif;

    ii++; endloop;

    // Set the appropriate anchor for all members of glyph
    // equivalence class
    if (anchor_pos != 0)

        ii = 0; while (ii < SizeOf(_GlyphEquiv[i]))
            Select (_GlyphEquiv[i][ii]);
            AddAnchorPoint(_VowelEquiv[j][0], "basechar", anchor_pos, 0);
        ii++; endloop;

    endif;

j++; endloop;
i++; endloop;

SelectNone();

/*****************************************************************
* Fri Dec 22 2006 Maxim Iorsh <iorsh@math.technion.ac.il> 20061222
- Created
*****************************************************************/
